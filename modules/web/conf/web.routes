GET            /ugc-plans/templates/:planId                   controllers.web.PlanCtrl.getPlanFromTemplates(planId: String, fromLoc: String, backLoc: String?="",uid: String?="",trafficFlag: String?="",hotelFlag: String?="",restaurantFlag: String?="")
GET            /ugc-plans/:ugcPlanId                          controllers.web.PlanCtrl.getUGCPlans(userId: String?="",ugcPlanId: String, page: Int?=0, pageSize: Int?=1)
GET            /ugc-plans/users/:userId                       controllers.web.PlanCtrl.getUGCPlans(userId: String,ugcPlanId: String?="", page: Int?=0, pageSize: Int?=20)
GET            /plans/explore                                 controllers.web.PlanCtrl.explorePlans(fromLoc: String?="", loc: String?="", vs: String?="", sortField: String?="", sort: String?="asc", tag: String?="", minDays:Int?=0 ,maxDays:Int?=999, page: Int?=0, pageSize: Int?=20)
GET            /plans/:planId                                 controllers.web.PlanCtrl.getPlanFromTemplates(planId: String, fromLoc: String?="", backLoc: String?="",uid: String?="",trafficFlag: String?="",hotelFlag: String?="",restaurantFlag: String?="")
POST           /ugc-plans                                     controllers.web.PlanCtrl.saveUGCPlan()
DELETE         /ugc-plans/:ugcPlanId                          controllers.web.PlanCtrl.deleteUGCPlans(ugcPlanId: String)
POST           /plans/optimizers                              controllers.web.PlanCtrl.optimizePlan()
GET            /misc/notes/search                             controllers.web.TravelNoteCtrl.searchNotes()

GET            /poi/view-spots/search                         controllers.web.POICtrl.poiSearch(poiType: String="vs", locId: String?="", tag: String?="", keyword: String?="", page: Int?=0, pageSize: Int?=20,sortField: String?="hotness", sort: String?="desc",hotelType: String?="")
GET            /poi/hotels/search                             controllers.web.POICtrl.poiSearch(poiType: String="hotel", locId: String?="", tag: String?="", keyword: String?="", page: Int?=0, pageSize: Int?=20,sortField: String?="hotness", sort: String?="desc",hotelType: String?="")
GET            /poi/restaurants/search                        controllers.web.POICtrl.poiSearch(poiType: String="restaurant", locId: String?="", tag: String?="", keyword: String?="", page: Int?=0, pageSize: Int?=20,sortField: String?="hotness", sort: String?="desc",hotelType: String?="")
GET            /poi/shopping/search                           controllers.web.POICtrl.poiSearch(poiType: String="shopping", locId: String?="", tag: String?="", keyword: String?="", page: Int?=0, pageSize: Int?=20,sortField: String?="hotness", sort: String?="desc",hotelType: String?="")
GET            /poi/view-spots/explore                        controllers.web.POICtrl.explore(poiDesc: String="vs", loc: String?="",page: Int?=0, pageSize: Int?=20)
GET            /poi/hotels/explore                            controllers.web.POICtrl.explore(poiDesc: String="hotel", loc: String?="",page: Int?=0, pageSize: Int?=20)
GET            /poi/restaurants/explore                       controllers.web.POICtrl.explore(poiDesc: String="restaurant", loc: String?="",page: Int?=0, pageSize: Int?=20)
GET            /poi/view-spots/:spotId                        controllers.web.POICtrl.viewSpotInfo(poiDesc: String="vs", spotId: String, showDetails: Int=1, showRelated: Int?=0, pageSize: Int?=10)
GET            /poi/hotels/:hotelId                           controllers.web.POICtrl.viewSpotInfo(poiDesc: String="hotel", hotelId: String, showDetails: Int=1, showRelated: Int?=0, pageSize: Int?=10)
GET            /poi/restaurants/:resId                        controllers.web.POICtrl.viewSpotInfo(poiDesc: String="restaurant", resId: String, showDetails: Int=1, showRelated: Int?=0, pageSize: Int?=10)

GET            /itineraries/air-routes                        controllers.web.TrafficCtrl.searchAirRoutes(dep: String, arr: String, depTime: String?="", sortField: String?="price", sort: String?="desc", timeFilterType: String?="dep", timeFilter: Int?=0, page: Int?=0, pageSize: Int?=20)
GET            /itineraries/air-routes/:flightCode            controllers.web.TrafficCtrl.getAirRouteByCode(flightCode: String, depTime: String?="")
GET            /itineraries/train-routes                      controllers.web.TrafficCtrl.getTrainRoutes(dep: String, arr: String,depTime: String?="", trainType: String?="", sortField: String?="price", sort: String?="asc", timeFilterType: String?="dep", timeFilter: Int?=0, page: Int?=0, pageSize: Int?=20)
GET            /itineraries/train-routes/:trainCode           controllers.web.TrafficCtrl.getTrainRouteByCode(trainCode: String, depTime: String?="")
GET            /itineraries/airport/:id                       controllers.web.TrafficCtrl.getTrafficHubInfo(trafficType: String="airport",id :String)
GET            /itineraries/trainstation/:id                  controllers.web.TrafficCtrl.getTrafficHubInfo(trafficType: String="trainstation",id :String)
GET            /suggestions                                    controllers.web.MiscCtrl.getSuggestions(word: String, loc: Boolean?=false, vs: Boolean?=false, hotel: Boolean?=false, restaurant: Boolean?=false, pageSize: Int?=5)

GET            /geo/localities/search                         controllers.web.GeoCtrl.searchLocality(keyword: String?="", country: String?="", scope: Int?=1, prefix: Boolean?=true, page: Int?=0, pageSize: Int?=20)
GET            /geo/localities/:id                            controllers.web.GeoCtrl.getLocality(id: String, relatedVs: Int?=0, hotel: Int?=0, restaurant: Int?=0)
POST           /users/oauth-login                             controllers.web.UserCtrl.oauthLogin()

GET            /recommend/hotvs                               controllers.web.MiscCtrl.recommend(sortType: String = "hotVs", page: Int?=0, pageSize: Int?=20)
GET            /recommend/hotcity                             controllers.web.MiscCtrl.recommend(sortType: String = "hotCity", page: Int?=0, pageSize: Int?=20)
GET            /recommend/newitem                             controllers.web.MiscCtrl.recommend(sortType: String = "newItemWeight", page: Int?=0, pageSize: Int?=20)
GET            /recommend/editor                              controllers.web.MiscCtrl.recommend(sortType: String = "editorWeight", page: Int?=0, pageSize: Int?=20)
GET            /recommend/mustgo                              controllers.web.MiscCtrl.recommend(sortType: String = "mustGoWeight", page: Int?=0, pageSize: Int?=20)
GET            /recommend/popularity                          controllers.web.MiscCtrl.recommend(sortType: String = "popularityWeight", page: Int?=0, pageSize: Int?=20)